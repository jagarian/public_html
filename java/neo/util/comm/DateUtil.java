package neo.util.comm;import java.util.*;import java.sql.Timestamp;import java.text.*;import javax.servlet.jsp.PageContext;import neo.exception.CommandException;/** * 	@Class Name	: 	DateUtil.java * 	@파일설명		:	[사용예제] 오늘일자 : DateUtil.getCurrentDateString()+" => "+DateUtil.getCurrentTimeString() * 	Log.info( DateUtil.getCurrentDateString() ) ;                                      	// 20020719                * 	Log.info( DateUtil.getCurrentDateString("yyyy/MM/dd") ) ;                     		// 2002/07/19              * 	Log.info( DateUtil.getCurrentTimeString() ) ;                                      	// 094837                   * 	Log.info( DateUtil.getCurrentDateString("HH:mm:ss") ) ;                        		// 09:48:37                * 	Log.info( DateUtil.getCurrentDateString("hh:mm:ss") ) ;                         	// 09:48:37               * 	Log.info( DateUtil.convertFormat("20020716") ) ;                                   	// 2002/07/16              * 	Log.info( DateUtil.convertFormat("20020716","yyyy년MM월dd일") ) ;        			// 2002년07월16일           * 	Log.info( DateUtil.convertToTimestamp("20020717") ) ;                          		// 2002-07-17 09:48:37.459 * 	Log.info( DateUtil.convertToTimestampHMS("20020717123456") ) ;          			// 2002-07-17 12:34:56.459 * * 	String fromDateDash = "2002-07-18" ; * 	String fromDate = "20020718" ; * 	String toDateDash = "2001-05-15" ; * 	String toDate = "20010515" ; * 	Log.info( DateUtil.addDays( fromDate , 3 ) ) ;                                     	// 20020721                 * 	Log.info( DateUtil.addDays( fromDateDash , 3  , "yyyy-MM-dd" ) ) ;       			// 2002-07-21               * 	Log.info( DateUtil.addMonths( fromDate , 3 ) ) ;                                    // 20021018                 * 	Log.info( DateUtil.addMonths( fromDateDash , 3  , "yyyy-MM-dd" ) ) ;   				// 2002-10-18 * 	Log.info( DateUtil.addYears( fromDate , 3 ) ) ;                                    	// 20050717                 * 	Log.info( DateUtil.addYears( fromDateDash , 3  , "yyyy-MM-dd" ) ) ;      			// 2005-07-17 * 	Log.info( DateUtil.yearsBetween( fromDate , toDate ) ) ;                        	// -1                      * 	Log.info( DateUtil.yearsBetween( fromDateDash , toDateDash  , "yyyy-MM-dd" ) ) ;  	// -1         * 	Log.info( DateUtil.daysBetween( fromDate , toDate ) ) ;                         	// -429                     * 	Log.info( DateUtil.daysBetween( fromDateDash , toDateDash  , "yyyy-MM-dd" ) ) ;		// -429       * 	Log.info( DateUtil.monthsBetween( fromDate , toDate ) ) ;                     		// -14                      * 	Log.info( DateUtil.monthsBetween( fromDateDash , toDateDash  , "yyyy-MM-dd" ) ) ;	// -14        * 	Log.info( DateUtil.whichDay( fromDate  ) ) ;                                    	// 5                        * 	Log.info( DateUtil.whichDay( fromDateDash  , "yyyy-MM-dd" ) ) ;          			// 5          * 	Log.info( DateUtil.lastDayOfMonth( fromDate  ) ) ;                                 	// 20020731                * 								Log.info( DateUtil.lastDayOfMonth( fromDateDash  , "yyyy-MM-dd" ) ) ;	// 2002-07-31 *             * 	@Version			: 	1.0 *	@Author			: 	hoon09 * 	@Copyright		: 	All Right Reserved ********************************************************************************************** * 	작업일 		버젼	구분	작업자		내용 * -------------------------------------------------------------------------------------------- *	2005-05-01 	1.4		생성	hoon09		source create (삼성전기) *	2006-11-23 	1.4		수정	hoon09		code convention apply (멀티캠퍼스) *	2009-07-03	1.6		수정	hoon09		code convention apply (국민은행, 펜타시큐리티) *	2009-09-23	1.7		수정	hoon09		code valid check (푸르덴샬생명보험,뱅뱅) **********************************************************************************************              */public class DateUtil {		/**	 * @title	 현재 날짜를 yyyyMMdd hh:mm:ss 형식으로 반환한다.	 * 	 * @param 없슴 	 * @return	String yyyyMMdd hh:mm:ss 형식의 현재날짜	 */	public static String getCurrentDateTimeString() {		return (			getCurrentDateString("yyyyMMdd") + getCurrentDateString("HHmmss"));	}		/**	 * @title	 현재 날짜를 yyyyMMdd 형식으로 반환한다.	 * 	 * @param 없슴	 * @return  String  암호화된 ID	 */	public static String getCurrentDateString() {		return getCurrentDateString("yyyyMMdd");	}	/**	 * @title	 현재 시각을  HHmmss 형식으로 반환한다.	 * 	 * @param  	 * @return	String HHmmss 형식의 현재 시각	 */	public static String getCurrentTimeString() {		return getCurrentDateString("HHmmss");	}		/**	 * @title	 현재날짜를 주어진 pattern 에 따라 반환한다.	 * 	 * @param pattern : SimpleDateFormat 에 적용할 pattern	 * @return	 String pattern 형식의 현재날짜	 */	public static String getCurrentDateString(String pattern) {		return convertToString(getCurrentTimeStamp(), pattern);	}	public static String getCurrentDateFirstDayString() {		String retuDate = "";		String currentlyDate = getTodayYearMonth(convertToString(getCurrentTimeStamp(), "yyyyMMdd"));		retuDate = currentlyDate + "01";		return retuDate;	}	public static String getCurrentDateLastDayString() {		String lastDayStr = "";		try {			lastDayStr = lastDayOfMonth(convertToString(getCurrentTimeStamp(), "yyyyMMdd"));		} catch (Exception e) {		}		return lastDayStr;	}	/**	 * @title	 yyyyMMdd 형식의 날짜를 yyyy/MM/dd 형식으로 반환한다.	 * 	 * @param dateData : yyyyMMdd 형식의 날짜	 * @return	 String yyyy/MM/dd  형식의 해당 날짜	 */	public static String convertFormat(String dateData) {		return convertFormat(dateData, "yyyy/MM/dd");	}		/**	 * @title	 yyyyMMdd 형식의 날짜를 yyyy/MM/dd 형식으로 반환한다.	 * 	 * @param dateData : yyyyMMdd 형식의 날짜	 *           	 format : SimpleDateFormat 에 적용할 pattern	 * @return	String pattern  형식의 해당 날짜	 */	public static String convertFormat(String dateData, String format) {		return convertToString(convertToTimestamp(dateData), format);	}	/**	 * @title	 yyyyMMdd 형식의 날짜를 yyyy/MM/dd 형식으로 반환한다.	 * 	 * @param 	 * @return	 Timestamp 현재 Timestamp 값	 */	public static Timestamp getCurrentTimeStamp() {		Calendar cal = new GregorianCalendar();		Timestamp result = new Timestamp(cal.getTime().getTime());		return result;	}	/**	 * @title	 yyyyMMdd 형식의 Timestamp 날짜를 yyyy/MM/dd 형식으로 반환한다.	 * 	 * @param dateData : Timestamp 형식의 날짜	 * @return	 String yyyy/MM/dd 형식의 Timestamp 날짜	 */	public static String convertToString(Timestamp dateData) {		return convertToString(dateData, "yyyy/MM/dd");	}		/**	 * @title	 yyyyMMdd 형식의 Timestamp 날짜를 pattern 에 따른 형식으로 반환한다.	 * 	 * @param dateData : Timestamp 형식의 날짜	 *           	 pattern : SimpleDateFormat 에 적용할 pattern	 * @return	String yyyy/MM/dd 형식의 Timestamp 날짜	 */	public static String convertToString(Timestamp dateData, String pattern) {		return convertToString(dateData, pattern, java.util.Locale.KOREA);	}		/**	 * @title	 yyyyMMdd 형식의 Timestamp 날짜를 pattern 과 locale  에 따른 형식으로 반환한다.	 * 	 * @param dateData : Timestamp 형식의 날짜	 *           	 pattern : SimpleDateFormat 에 적용할 pattern	 *           	 locale : 국가별 LOCALE	 * @return	String pattern 형식의 Timestamp 날짜	 */	public static String convertToString(		Timestamp dateData,		String pattern,		java.util.Locale locale) {		if (dateData == null) {			return null;		}		SimpleDateFormat formatter = new SimpleDateFormat(pattern, locale);		//formatter.applyPattern( pattern );		return formatter.format(dateData);	}		/**	 * @title	yyyyMMdd 형식의  날짜를 Timestamp 로  반환한다.	 * 	 * @param [1] dateData     yyyyMMdd 형식의 날짜	 * @return	Timestamp 형식의 해당 날짜	 */	public static Timestamp convertToTimestamp(String dateData) {		if (dateData == null)			return null;		if (dateData.trim().equals(""))			return null;		int dateObjLength = dateData.length();		String yearString = "2002";		String monthString = "01";		String dayString = "01";		if (dateObjLength >= 4) {			yearString = dateData.substring(0, 4);		}		if (dateObjLength >= 6) {			monthString = dateData.substring(4, 6);		}		if (dateObjLength >= 8) {			dayString = dateData.substring(6, 8);		}		int year = Integer.parseInt(yearString);		int month = Integer.parseInt(monthString) - 1;		int day = Integer.parseInt(dayString);		Calendar cal = new GregorianCalendar();		cal.set(year, month, day);		//cal.getTime();		return new Timestamp(cal.getTime().getTime());	}		/**	 * @title		yyyyMMddHHmmss 형식의  날짜시각을 Timestamp 로  반환한다.	 * 	 * @param	[1] Timestamp  형식의 해당 날짜	 * @return	dateData        yyyyMMddHHmmss 형식의 날짜시각	 */	public static Timestamp convertToTimestampHMS(String dateData) {		if (dateData == null)			return null;		if (dateData.trim().equals(""))			return null;		String yearString = dateData.substring(0, 4);		String monthString = dateData.substring(4, 6);		String dayString = dateData.substring(6, 8);		String hourString = dateData.substring(8, 10);		String minString = dateData.substring(10, 12);		String secString = dateData.substring(12, 14);		int year = Integer.parseInt(yearString);		int month = Integer.parseInt(monthString) - 1;		int day = Integer.parseInt(dayString);		int hour = Integer.parseInt(hourString);		int min = Integer.parseInt(minString);		int sec = Integer.parseInt(secString);		Calendar cal = new GregorianCalendar();		cal.set(year, month, day, hour, min, sec);		return new Timestamp(cal.getTime().getTime());	}	public static String timestampHMSOfName(String dateData) {		if (dateData == null)			return null;		if (dateData.trim().equals(""))			return null;		String yearString = dateData.substring(0, 4);		String monthString = dateData.substring(4, 6);		String dayString = dateData.substring(6, 8);		String hourString = dateData.substring(8, 10);		String minString = dateData.substring(10, 12);		String secString = dateData.substring(12, 14);		String makeStr =	yearString	+ monthString + dayString + hourString + minString	+ secString;		return makeStr;	}	/**	 * @title	 check date string validation with an user defined format.	 * 	 * @param date java.util.Date	 * @return	 s : date string you want to check.	 *           	 format string representation of the date format. For example, "yyyy-MM-dd".	 */	private static java.util.Date check(String s, String format)		throws java.text.ParseException {					if (s == null)			throw new java.text.ParseException("date string to check is null",	0);					if (format == null)			throw new java.text.ParseException("format string to check date is null", 0);					java.text.SimpleDateFormat formatter =	new java.text.SimpleDateFormat(format, java.util.Locale.KOREA);		java.util.Date date = null;				try {			date = formatter.parse(s);		} catch (java.text.ParseException e) {			/*			throw new java.text.ParseException(			  e.getMessage() + " with format \"" + format + "\"",			  e.getErrorOffset()			);			*/			throw new java.text.ParseException(" wrong date:\"" + s + "\" with format \"" + format + "\"", 0);		}				if (!formatter.format(date).equals(s))			throw new java.text.ParseException("Out of bound date:\""	+ s + "\" with format \""	+ format + "\"", 0);					return date;	}		/**	 * @title	 check date string validation with the default format "yyyyMMdd".	 * 	 * @param s : date string you want to check with default format "yyyyMMdd"	 * @return	 boolean true 날짜 형식이 맞고, 존재하는 날짜일 때	 *           	 false 날짜 형식이 맞지 않거나, 존재하지 않는 날짜일 때	 */	public static boolean isValid(String s) {		return DateUtil.isValid(s, "yyyyMMdd");	}		/**	 * @title	 check date string validation with an user defined format.	 * 	 * @param s : date string you want to check.	 *           	 format : string representation of the date format. For example, "yyyy-MM-dd".	 * @return	 boolean true 날짜 형식이 맞고, 존재하는 날짜일 때	 *           	 f	alse 날짜 형식이 맞지 않거나, 존재하지 않는 날짜일 때	 */		public static boolean isValid(String s, String format) {		/*		if ( s == null )		  throw new NullPointerException("date string to check is null");		if ( format == null )		  throw new NullPointerException("format string to check date is null");		*/		java.text.SimpleDateFormat formatter =			new java.text.SimpleDateFormat(format, java.util.Locale.KOREA);		java.util.Date date = null;		try {			date = formatter.parse(s);		} catch (java.text.ParseException e) {			return false;		}		if (!formatter.format(date).equals(s))			return false;		return true;	}		/**	 * @title	days between two date strings with default defined format.(yyyyMMdd)	 * 	 * @param s : date string you want to check.	 * @return	 int 날짜 형식이 맞고, 존재하는 날짜일 때 요일을 리턴	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 *           	 0: 일요일 (java.util.Calendar.SUNDAY 와 비교)	 *           	 1: 월요일 (java.util.Calendar.MONDAY 와 비교)	 *           	 2: 화요일 (java.util.Calendar.TUESDAY 와 비교)	 *           	 3: 수요일 (java.util.Calendar.WENDESDAY 와 비교)	 *           	 4: 목요일 (java.util.Calendar.THURSDAY 와 비교)	 *           	 5: 금요일 (java.util.Calendar.FRIDAY 와 비교)	 *           	 6: 토요일 (java.util.Calendar.SATURDAY 와 비교)	 * 			  	 예) String s = "20000529";	 * 			     int dayOfWeek = whichDay(s, format);	 *			     if (dayOfWeek == java.util.Calendar.MONDAY)	 *			     	Log.info(" 월요일: " + dayOfWeek);	 * 			     if (dayOfWeek == java.util.Calendar.TUESDAY)	 *			     	Log.info(" 화요일: " + dayOfWeek);	 */	public static int whichDay(String s) throws ParseException {		return whichDay(s, "yyyyMMdd");	}		/**	 * @title	 days between two date strings with user defined format.	 * 	 * @param s : date string you want to check.	 *				 format : string representation of the date format. For example, "yyyy-MM-dd".	 * @return	String  암호화된 ID	 * 				 int 날짜 형식이 맞고, 존재하는 날짜일 때 요일을 리턴	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 *           	 0: 일요일 (java.util.Calendar.SUNDAY 와 비교)	 *           	 1: 월요일 (java.util.Calendar.MONDAY 와 비교)	 *           	 2: 화요일 (java.util.Calendar.TUESDAY 와 비교)	 *           	 3: 수요일 (java.util.Calendar.WENDESDAY 와 비교)	 *           	 4: 목요일 (java.util.Calendar.THURSDAY 와 비교)	 *           	 5: 금요일 (java.util.Calendar.FRIDAY 와 비교)	 *           	 6: 토요일 (java.util.Calendar.SATURDAY 와 비교)	 * 			 	 예) String s = "2000-05-29";	 * 			     int dayOfWeek = whichDay(s, "yyyy-MM-dd");	 *				 if (dayOfWeek == java.util.Calendar.MONDAY)	 *					Log.info(" 월요일: " + dayOfWeek);	 *				 if (dayOfWeek == java.util.Calendar.TUESDAY)	 *					Log.info(" 화요일: " + dayOfWeek);	 */	public static int whichDay(String s, String format) throws ParseException {		java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat(format, java.util.Locale.KOREA);		java.util.Date date = check(s, format);		java.util.Calendar calendar = formatter.getCalendar();		calendar.setTime(date);		return calendar.get(java.util.Calendar.DAY_OF_WEEK);	}	public static String whichDayStr(String s, String format)		throws ParseException {		int ct = whichDay(s, format);		String ctStr = "";		if (ct == 1)			ctStr = "월";		else if (ct == 2)			ctStr = "화";		else if (ct == 3)			ctStr = "수";		else if (ct == 4)			ctStr = "목";		else if (ct == 5)			ctStr = "금";		else if (ct == 0)			ctStr = "일";		else			ctStr = "토";		return ctStr;	}	public static String getWhatDay(String yyyymmdd) {		int year = StringUtil.strToInt(StringUtil.substr(yyyymmdd, 0, 4));		int month = StringUtil.strToInt(StringUtil.substr(yyyymmdd, 4, 6));		int day = StringUtil.strToInt(StringUtil.substr(yyyymmdd, 6, 8));		if (month == 1 || month == 2)			year--;		month = (month + 9) % 12 + 1;		int y = year % 100;		int century = year / 100;		int week = ((13 * month - 1) / 5 				+ day				+ y				+ y / 4				+ century / 4				- 2 * century)				% 7;		if (week < 0)			week = (week + 7) % 7;		String ch_week = "";		switch (week) {			case 0 :				ch_week = "SAT";				break;			case 1 :				ch_week = "SUN";				break;			case 2 :				ch_week = "MON";				break;			case 3 :				ch_week = "TUE";				break;			case 4 :				ch_week = "WEB";				break;			case 5 :				ch_week = "THU";				break;			case 6 :				ch_week = "FRI";				break;		}		return ch_week;	}	public static String getWhatDay2(String yyyymmdd) {		int year = StringUtil.strToInt(StringUtil.substr(yyyymmdd, 0, 4));		int month = StringUtil.strToInt(StringUtil.substr(yyyymmdd, 4, 6));		int day = StringUtil.strToInt(StringUtil.substr(yyyymmdd, 6, 8));		java.util.Calendar c = java.util.Calendar.getInstance();		/* 		year - the value used to set the YEAR time field. 		month - the value used to set the MONTH time field. Month value is 0-based. e.g., 0 for January. 		date - the value used to set the DATE time field. 		*/		c.clear();		c.set(year, month, day);		String ch_week = "";		switch (c.get(Calendar.DAY_OF_WEEK)) {			case java.util.Calendar.SUNDAY :				ch_week = "SUN";				break;			case java.util.Calendar.MONDAY :				ch_week = "MON";				break;			case java.util.Calendar.TUESDAY :				ch_week = "TUE";				break;			case java.util.Calendar.WEDNESDAY :				ch_week = "WEB";				break;			case java.util.Calendar.THURSDAY :				ch_week = "THU";				break;			case java.util.Calendar.FRIDAY :				ch_week = "FRI";				break;			case java.util.Calendar.SATURDAY :				ch_week = "SAT";				break;		}		return ch_week;	}		/**	 * @title	 days between two date strings with default defined format.("yyyyMMdd")	 * 	 * @param from : date string	 *				 to : date string	 * @return	 날짜 형식이 맞고, 존재하는 날짜일 때 2개 일자 사이의 나이 리턴	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static int daysBetween(String from, String to)		throws ParseException {		return daysBetween(from, to, "yyyyMMdd");	}		/**	 * @title	 days between two date strings with user defined format.	 * 	 * @param from : date string	 *           	 to : date string	 * @return	 날짜 형식이 맞고, 존재하는 날짜일 때 2개 일자 사이의 나이 리턴	 *            	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static int daysBetween(String from, String to, String format)		throws ParseException {		// java.text.SimpleDateFormat formatter =		// new java.text.SimpleDateFormat (format, java.util.Locale.KOREA);		java.util.Date d1 = check(from, format);		java.util.Date d2 = check(to, format);		long duration = d2.getTime() - d1.getTime();		return (int) (duration / (1000 * 60 * 60 * 24));		// seconds in 1 day	}	/**	 * @title	 years between two date strings with default defined format.("yyyyMMdd")	 * 	 * @param from : date string	 *           	 to : date string	 * @return	 날짜 형식이 맞고, 존재하는 날짜일 때 2개 일자 사이의 나이 리턴	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static int yearsBetween(String from, String to)		throws ParseException {		return yearsBetween(from, to, "yyyyMMdd");	}	/**	 * @title	 years between two date strings with user defined format.	 * 	 * @param from : date string	 *           	 to : date string	 * @return	 날짜 형식이 맞고, 존재하는 날짜일 때 2개 일자 사이의 나이 리턴	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static int yearsBetween(String from, String to, String format)		throws ParseException {		return (int) (daysBetween(from, to, format) / 365);	}		/**	 * @title	 return add day to date strings	 * 	 * @param s : string	 *            	 day : 더할 일수	 * @return	 String 날짜 형식이 맞고, 존재하는 날짜일 때 일수 더하기	 *            	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static String addDays(String s, int day) throws ParseException {		return addDays(s, day, "yyyyMMdd");	}		/**	 * @title	 add day to date strings with user defined format.	 * 	 * @param s : string	 *           	 day : 더할 일수	 * @return	 String 날짜 형식이 맞고, 존재하는 날짜일 때 일수 더하기	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static String addDays(String s, int day, String format)		throws ParseException {		java.text.SimpleDateFormat formatter =	new java.text.SimpleDateFormat(format, java.util.Locale.KOREA);		java.util.Date date = check(s, format);		date.setTime(date.getTime() + ((long) day * 1000 * 60 * 60 * 24));		return formatter.format(date);	}		/**	 * @title	 add month to date strings	 * 	 * @param date : string	 *           	 int : 더할 일수	 * @return	 String 날짜 형식이 맞고, 존재하는 날짜일 때 월수 더하기	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static String addMonths(String s, int month) throws ParseException {		return addMonths(s, month, "yyyyMMdd");	}		/**	 * @title	 add month to date strings with user defined format.	 * 	 * @param s : string	 *           	 addMonth : 더할 월수	 *           	 format : string representation of the date format. For example, "yyyy-MM-dd".	 * @return	 String 날짜 형식이 맞고, 존재하는 날짜일 때 월수 더하기	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static String addMonths(String s, int addMonth, String format)		throws ParseException {		java.text.SimpleDateFormat formatter =	new java.text.SimpleDateFormat(format, java.util.Locale.KOREA);		java.util.Date date = check(s, format);		java.text.SimpleDateFormat yearFormat =	new java.text.SimpleDateFormat("yyyy", java.util.Locale.KOREA);		java.text.SimpleDateFormat monthFormat = new java.text.SimpleDateFormat("MM", java.util.Locale.KOREA);		java.text.SimpleDateFormat dayFormat = new java.text.SimpleDateFormat("dd", java.util.Locale.KOREA);		int year = Integer.parseInt(yearFormat.format(date));		int month = Integer.parseInt(monthFormat.format(date));		int day = Integer.parseInt(dayFormat.format(date));		month += addMonth;		if (addMonth > 0) {			while (month > 12) {				month -= 12;				year += 1;			}		} else {			while (month <= 0) {				month += 12;				year -= 1;			}		}		java.text.DecimalFormat fourDf = new java.text.DecimalFormat("0000");		java.text.DecimalFormat twoDf = new java.text.DecimalFormat("00");		String tempDate = String.valueOf(fourDf.format(year))	+ String.valueOf(twoDf.format(month)) + String.valueOf(twoDf.format(day));		java.util.Date targetDate = null;		try {			targetDate = check(tempDate, "yyyyMMdd");		} catch (java.text.ParseException pe) {			day = lastDay(year, month);			tempDate = String.valueOf(fourDf.format(year)) + String.valueOf(twoDf.format(month)) + String.valueOf(twoDf.format(day));			targetDate = check(tempDate, "yyyyMMdd");		}		return formatter.format(targetDate);	}		/**	 * @title	 add year to date strings	 * 	 * @param s : string	 *           	 year : 더할 년수	 * @return	 String 날짜 형식이 맞고, 존재하는 날짜일 때 년수  더하기	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static String addYears(String s, int year) throws ParseException {		return addYears(s, year, "yyyyMMdd");	}		/**	 * @title	 add year to date strings  with user defined format.	 * 	 * @param s : string	 *           	 year : 더할 년수	 *           	 format : string representation of the date format. For example, "yyyy-MM-dd".	 * @return	 String 날짜 형식이 맞고, 존재하는 날짜일 때 년수 더하기	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static String addYears(String s, int year, String format)		throws ParseException {		java.text.SimpleDateFormat formatter =	new java.text.SimpleDateFormat(format, java.util.Locale.KOREA);		java.util.Date date = check(s, format);		date.setTime(date.getTime() + ((long) year * 1000 * 60 * 60 * 24 * (365)));		return formatter.format(date);	}	/**	 * @title	 months between two date strings	 * 	 * @param from : date string	 *           	 to : date string	 * @return	 int 날짜 형식이 맞고, 존재하는 날짜일 때 2개 일자 사이의 개월수  리턴	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static int monthsBetween(String from, String to)		throws ParseException {		return monthsBetween(from, to, "yyyyMMdd");	}	/**	 * @title	 months between two date strings with user defined format.	 * 	 * @param from : date string	 *           	 to : date string	 * @return	 int 날짜 형식이 맞고, 존재하는 날짜일 때 2개 일자 사이의개월수  리턴	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static int monthsBetween(String from, String to, String format)		throws ParseException {		//java.text.SimpleDateFormat formatter =		//    new java.text.SimpleDateFormat (format, java.util.Locale.KOREA);		java.util.Date fromDate = check(from, format);		java.util.Date toDate = check(to, format);		// if two date are same, return 0.		if (fromDate.compareTo(toDate) == 0)			return 0;		java.text.SimpleDateFormat yearFormat =	new java.text.SimpleDateFormat("yyyy", java.util.Locale.KOREA);		java.text.SimpleDateFormat monthFormat = new java.text.SimpleDateFormat("MM", java.util.Locale.KOREA);		java.text.SimpleDateFormat dayFormat = new java.text.SimpleDateFormat("dd", java.util.Locale.KOREA);		int fromYear = Integer.parseInt(yearFormat.format(fromDate));		int toYear = Integer.parseInt(yearFormat.format(toDate));		int fromMonth = Integer.parseInt(monthFormat.format(fromDate));		int toMonth = Integer.parseInt(monthFormat.format(toDate));		int fromDay = Integer.parseInt(dayFormat.format(fromDate));		int toDay = Integer.parseInt(dayFormat.format(toDate));		int result = 0;		result += ((toYear - fromYear) * 12);		result += (toMonth - fromMonth);		//if (((toDay - fromDay) < 0) ) result += fromDate.compareTo(toDate);		// ceil과 floor의 효과		if (((toDay - fromDay) > 0))			result += toDate.compareTo(fromDate);		return result;	}		/**	 * @title	 그달의 마지말 날을 구함	 * 	 * @param src : string	 * @return	 String 날짜 형식이 맞고, 존재하는 날짜일 때 그달의 마지말 날을 구함	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static String lastDayOfMonth(String src) throws ParseException {		return lastDayOfMonth(src, "yyyyMMdd");	}		/**	 * @title	 그달의 마지말 날을 구함	 * 	 * @param format : string representation of the date format. For example, "yyyy-MM-dd".	 * @return	 String 날짜 형식이 맞고, 존재하는 날짜일 때 그달의 마지말 날을 구함	 *           	 형식이 잘못 되었거나 존재하지 않는 날짜: java.text.ParseException 발생	 */	public static String lastDayOfMonth(String src, String format)		throws ParseException {		java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat(format, java.util.Locale.KOREA);		java.util.Date date = check(src, format);		java.text.SimpleDateFormat yearFormat = new java.text.SimpleDateFormat("yyyy", java.util.Locale.KOREA);		java.text.SimpleDateFormat monthFormat = new java.text.SimpleDateFormat("MM", java.util.Locale.KOREA);		int year = Integer.parseInt(yearFormat.format(date));		int month = Integer.parseInt(monthFormat.format(date));		int day = lastDay(year, month);		java.text.DecimalFormat fourDf = new java.text.DecimalFormat("0000");		java.text.DecimalFormat twoDf = new java.text.DecimalFormat("00");		String tempDate = String.valueOf(fourDf.format(year))									+ String.valueOf(twoDf.format(month))								+ String.valueOf(twoDf.format(day));		java.util.Date targetDate = check(tempDate, "yyyyMMdd");		return formatter.format(targetDate);	}	/**	 * @title	 해당년도,월의 마직막 일자를 구하기	 * 	 * @param  	 * @return	 	 */	private static int lastDay(int year, int month)		throws java.text.ParseException {		int day = 0;		switch (month) {			case 1 :			case 3 :			case 5 :			case 7 :			case 8 :			case 10 :			case 12 :				day = 31;				break;			case 2 :				if ((year % 4) == 0) {					if ((year % 100) == 0 && (year % 400) != 0) {						day = 28;					} else {						day = 29;					}				} else {					day = 28;				}				break;			default :				day = 30;		}		return day;	}	/**	 * @title	 현제일자를 YYYYMMDD 형식으로 리턴	 * 	 * @param  	 * @return  	 */	public static String getTodayYear() {		Calendar p_date = Calendar.getInstance();		int Year = p_date.get(Calendar.YEAR);		int Month = p_date.get(Calendar.MONTH) + 1;		int Day = p_date.get(Calendar.DATE);		return Year					+ ((Month < 10) ? "0" + Month : "" + Month)					+ ((Day < 10) ? "0" + Day : "" + Day);	}	public static String getTodayYearType1Conv() {		Calendar p_date = Calendar.getInstance();		int Year = p_date.get(Calendar.YEAR);		int Month = p_date.get(Calendar.MONTH) + 1;		int Day = p_date.get(Calendar.DATE);		return Year + " - " + Month + " - " + Day; //+"-";	}	public static String getTodayYearType2Conv() {		Calendar p_date = Calendar.getInstance();		int Year = p_date.get(Calendar.YEAR);		int Month = p_date.get(Calendar.MONTH) + 1;		int Day = p_date.get(Calendar.DATE);		return Year + ". " + Month + ". " + Day;	}		/**	 * @title	 현제일자를 YYYY-MM-DD 형식으로 리턴	 * 	 * @param  	 * @return  	 */	public static String getTodayYearStr() {		Calendar p_date = Calendar.getInstance();		int Year = p_date.get(Calendar.YEAR);		int Month = p_date.get(Calendar.MONTH) + 1;		int Day = p_date.get(Calendar.DATE);		return Year					+ "-"					+ ((Month < 10) ? "0" + Month : "" + Month)					+ "-"					+ ((Day < 10) ? "0" + Day : "" + Day);	}		/**	 * @title	 YYYYMMDD -> YYYYMM	 * 	 * 	 * @param 	 * @return		 */	public static String getTodayYearMonth(String yyyymmdd) {		String Year = StringUtil.substr(yyyymmdd, 0, 4);		String Month = StringUtil.substr(yyyymmdd, 4, 6);		return Year + Month;	}		/**	 * @title	 YYYY.MM.DD -> YYYYMMDD	 * 	 * @param	 	 * @return		 */	public static String getYearMonType1Conv(String yyyymmdd) {		String Year = StringUtil.substr(yyyymmdd, 0, 4);		String Month = StringUtil.substr(yyyymmdd, 5, 7);		String Day = StringUtil.substr(yyyymmdd, 8, 10);		return Year + "" + Month + "" + Day;	}	/**	 * @title	 YYYYMM -> YYYY-MM	 * 	 * @param	 	 * @return 	 */	public static String getYearMonDayConversion(String yyyymmddStr) {		String Year = StringUtil.substr(yyyymmddStr, 0, 4);		String Month = StringUtil.substr(yyyymmddStr, 4, 6);		return Year + " - " + Month; // + " - ";	}	/**	 * @title	 YYYY.MM.DD -> YYYYMMDD	 * 	 * @param  	 * @return		 */	public static String getYearMonType2Conv(String yyyymmdd) {		String Year = StringUtil.substr(yyyymmdd, 0, 4);		String Month = StringUtil.substr(yyyymmdd, 4, 6);		String Day = StringUtil.substr(yyyymmdd, 6, 8);		return Year					+ " - "					+ StringUtil.strToInt(Month)					+ " - "					+ StringUtil.strToInt(Day);	}	/**	 * @title	 YYYYMMDD -> YYYY-MM-DD	 * 	 * @param 	 * @return		 */	public static String getYearMonthDay(String yyyymmdd) {		String Year = StringUtil.substr(yyyymmdd, 0, 4);		String Month = StringUtil.substr(yyyymmdd, 4, 6);		String Day = StringUtil.substr(yyyymmdd, 6, 8);		return Year + "-" + Month + "-" + Day;	}	/**	 * @title	 YYYYMMDD -> YYYY-MM-DD	 * 	 * @param  	 * @return		 */		public static String getYearMonthDayDelimiter(		String yyyymmdd,		String delimiter) {		String Year = StringUtil.substr(yyyymmdd, 0, 4);		String Month = StringUtil.substr(yyyymmdd, 4, 6);		String Day = StringUtil.substr(yyyymmdd, 6, 8);		return Year + delimiter + Month + delimiter + Day;	}		/**	 * @title	 달의 마지막일자	 * 	 * @param  	 * @return 	 */	public static int getMonthMaxday(int year, int month) {		switch (month) {			case 1 :			case 3 :			case 5 :			case 7 :			case 8 :			case 10 :			case 12 :				return (31);			case 4 :			case 6 :			case 9 :			case 11 :				return (30);			default :				if (((year % 4 == 0) && (year % 100 != 0))					|| (year % 400 == 0))					return (29);				else					return (28);		}	}		/**	 * @title	 년,월,일 8자리 보정 -> YYYYMMDD	 * 	 * @param  	 * @return  	 */	public static String dateZero(int yyyy, int mm, int dd) {		String formatStr = "";		formatStr =			yyyy				+ ((mm < 10) ? "0" + mm : "" + mm)				+ ((dd < 10) ? "0" + dd : "" + dd);		return formatStr;	}	/**	 * @title	 년도 4자리 보정	 * 	 * @param  	 * @return  	 */	public static String yearZero(int yyyy) {		String formatStr = "";		formatStr = "" + yyyy;		return formatStr;	}	/**	 * @title	 월 2자리 보정	 * 	 * @param  	 * @return  	 */	public static String monthZero(int mm) {		String formatStr = "";		formatStr = ((mm < 10) ? "0" + mm : "" + mm);		return formatStr;	}		/**	 * @title	 일 2자리 보정	 * 	 * @param  	 * @return 	 */	public static String dayZero(int dd) {		String formatStr = "";		formatStr = ((dd < 10) ? "0" + dd : "" + dd);		return formatStr;	}		/**	 * @title	 현제년도 구하기	 * 	 * @param  	 * @return 	 */	public static String getDefaultYear() {		Calendar p_date = Calendar.getInstance();		int Year = p_date.get(Calendar.YEAR);		return yearZero(Year);	}	/**	 * @title	 현제월 구하기	 * 	 * @param  	 * @return 	 */	public static String getDefaultMonth() {		Calendar p_date = Calendar.getInstance();		int Month = p_date.get(Calendar.MONTH) + 1;		return monthZero(Month);	}		/**	 * @title	 현제일 구하기	 * 	 * @param  	 * @return  	 */	public static String getDefaultDay() {		Calendar p_date = Calendar.getInstance();		int Day = p_date.get(Calendar.DATE);		return monthZero(Day);	}	/**	 * @title	 현제일자를 YYYYMMDD 형식으로 리턴	 * 	 * @param  	 * @return  	 */	public static String num2zero(int num) {		String formatStr = "";		formatStr = ((num < 10) ? "0" + num : "" + num);		return formatStr;	}	/**	 * @title	 현재 시각을 얻는다.	 * 	 * @param  	 * @return  	 */	public static String getNow() {		Calendar insCalendar = Calendar.getInstance();		String mstrHour = String.valueOf(insCalendar.get(Calendar.HOUR_OF_DAY));		String mstrMin = String.valueOf(insCalendar.get(Calendar.MINUTE));		String mstrSec = String.valueOf(insCalendar.get(Calendar.SECOND));		if (mstrHour.length() == 1) {			mstrHour = "0" + mstrHour;		}		if (mstrMin.length() == 1) {			mstrMin = "0" + mstrMin;		}		if (mstrSec.length() == 1) {			mstrSec = "0" + mstrSec;		}		return mstrHour + mstrMin + mstrSec;	}		/**	 * @title	 현재 요일을 얻는다.	 * 	 * @param  	 * @return	 SUNDAY=1 ~ SATURDAY=7 까지의 숫자반환	 */	public static int getCurrentDay() {		return Calendar.getInstance().get(Calendar.DAY_OF_WEEK);	}	/**	 * @title	 오늘날짜의 년도, 월, 일을 24시간 형식에 맞게 반환합니다	 * 	 * @param  	 * @return	 YYYY.MM.DD 형식의 날짜 문자열	 */	public static String getDate() {		SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd");		String dateStr = sdf.format(new Date());		return dateStr;	}		/**	 * @title	오늘날짜의 년도를 반환합니다	 * 	 * @param 	 * @return	 YYYY 형식의 년도	 */	public static String getYear() {		String dateStr = getDate();		StringTokenizer st = new StringTokenizer(dateStr, ".");		return st.nextToken();	}		/**	 * @title	 오늘날짜의 월을 반환합니다	 * 	 * @param 	 * @return	 YYYY 형식의 년도	 */	public static String getMonth() {		String dateStr = getDate();		StringTokenizer st = new StringTokenizer(dateStr, ".");		st.nextToken();		return st.nextToken();	}		/**	 * @title	 오늘날짜의 일을 반환합니다	 * 	 * @param 	 * @return	 YYYY 형식의 년도	 */	public static String getDay() {		String dateStr = getDate();		StringTokenizer st = new StringTokenizer(dateStr, ".");		st.nextToken();		st.nextToken();		return st.nextToken();	}		/**	 * @title	 현재 시간을 2자리로 리턴합니다	 * 	 * @param  	 * @return	 HH 형식의 시간	 */	public static String getHour() {		SimpleDateFormat sdf = new SimpleDateFormat("kk");		return sdf.format(new Date());	}		/**	 * @title	 현재 분을 2자리로 리턴합니다	 * 	 * @param  	 * @return	 MM 형식의 분	 */	public static String getMinutes() {		SimpleDateFormat sdf = new SimpleDateFormat("mm");		return sdf.format(new Date());	}		/**	 * @title	 현재 초를 2자리로 리턴합니다	 * 	 * @param  	 * @return	 SS 형식의 초	 */	public static String getSeconds() {		SimpleDateFormat sdf = new SimpleDateFormat("ss");		return sdf.format(new Date());	}		/**	 * @title	 현재 시간의 밀리초를 리턴합니다	 * 	 * @param 	 * @return	 S 형식의 밀리초	 */	public static String getMilliSeconds() {		SimpleDateFormat sdf = new SimpleDateFormat("SSS");		return sdf.format(new Date());	}	/**	 * @title	 초를 분형식으로 리턴합니다	 * 	 * @param 	 * @return	 S 형식의 밀리초  	 */	public static String getMin_form(int ss) {		String hour = null;		String minute = null;		String seconds = null;		String hhmmss = null;		int temp_ss = 0;		hour = String.valueOf(ss / 3600);		temp_ss = ss % 3600;		minute = String.valueOf(temp_ss / 60);		seconds = String.valueOf(temp_ss % 60);		if (hour.length() == 1)			hour = "0" + hour;		if (minute.length() == 1)			minute = "0" + minute;		if (seconds.length() == 1)			seconds = "0" + seconds;		hhmmss = hour + ":" + minute + ":" + seconds;		return hhmmss;	}	public static String getNowYear() {		Calendar calendar = Calendar.getInstance();		return (new Integer(calendar.get(1))).toString();	}		public static String getNowMonth() {		Calendar calendar = Calendar.getInstance();		return (new Integer(calendar.get(2) + 1)).toString();	}		public static String getNowDay() {		Calendar calendar = Calendar.getInstance();		return (new Integer(calendar.get(5))).toString();	}		public static String getOneWeekBeforeYear() {		Calendar calendar = Calendar.getInstance();		calendar.add(5, -7);		return (new Integer(calendar.get(1))).toString();	}		public static String getOneWeekBeforeMonth() {		Calendar calendar = Calendar.getInstance();		calendar.add(5, -7);		return (new Integer(calendar.get(2) + 1)).toString();	}		public static String getOneWeekBeforeDay() {		Calendar calendar = Calendar.getInstance();		calendar.add(5, -7);		return (new Integer(calendar.get(5))).toString();	}		public static String getOneMonthBeforeYear() {		Calendar calendar = Calendar.getInstance();		calendar.add(2, -1);		return (new Integer(calendar.get(1))).toString();	}		public static String getOneMonthBeforeMonth() {		Calendar calendar = Calendar.getInstance();		calendar.add(2, -1);		return (new Integer(calendar.get(2) + 1)).toString();	}		public static String getOneMonthBeforeDay() {		Calendar calendar = Calendar.getInstance();		calendar.add(2, -1);		return (new Integer(calendar.get(5))).toString();	}		public static String getOneMonthAfterMonth() {		Calendar calendar = Calendar.getInstance();		calendar.add(2, 1);		return (new Integer(calendar.get(2) + 1)).toString();	}		public static String getEndDay() {		Calendar calendar = Calendar.getInstance();		calendar.add(5, -7);		return (new Integer(calendar.get(5))).toString();	}		public static String getThreeMonthBeforeYear() {		Calendar calendar = Calendar.getInstance();		calendar.add(2, -3);		return (new Integer(calendar.get(1))).toString();	}		public static String getThreeMonthBeforeMonth() {		Calendar calendar = Calendar.getInstance();		calendar.add(2, -3);		return (new Integer(calendar.get(2) + 1)).toString();	}		public static String getThreeMonthBeforeDay() {		Calendar calendar = Calendar.getInstance();		calendar.add(2, -3);		return (new Integer(calendar.get(5))).toString();	}	/**	 * @title	 달의 영문이름을 가져오자	 * 	 * @param  	 * @return 	 */	public static String getEngMonth(int month) {		String selMonth = "";		switch (month) {			case 1 :				selMonth = "January";				break;			case 2 :				selMonth = "February";				break;			case 3 :				selMonth = "March";				break;			case 4 :				selMonth = "April";				break;			case 5 :				selMonth = "May";				break;			case 6 :				selMonth = "June";				break;			case 7 :				selMonth = "July";				break;			case 8 :				selMonth = "August";				break;			case 9 :				selMonth = "September";				break;			case 10 :				selMonth = "October";				break;			case 11 :				selMonth = "November";				break;			case 12 :				selMonth = "December";				break;		}		return selMonth;	}		 public static String getToday() {		 Calendar insCalendar = Calendar.getInstance();		 String strToday = getDate( insCalendar );		 return strToday;	}		public static String getDate( Calendar insCalendar ) {        String strMonth = "0" + String.valueOf( insCalendar.get( Calendar.MONTH ) + 1) // 0월 부터 시작하므로 1 더함              					,strDay   = "0" + String.valueOf( insCalendar.get( Calendar.DATE  ) )              					,strDate  = String.valueOf( insCalendar.get( Calendar.YEAR  ) ) +              					strMonth.substring( strMonth.length() - 2 )         +              					strDay.substring( strDay.length() - 2 );        return strDate;    }	/**	 * @title	 	'HH24MISS' 형식을 '오전HH시MI분SS초' 형식으로 바꾼다	 * 	 * @param	바꿀 시각 String	 * 					변환 타입: 	'HAN' : '오전/후 HH시MIN분SS초'	 * 									'ENG' : 'AM/PM HH:MIN:SS' 	 * 									'ETC' : 'HH24:MIN:SS' 	 * 					초 표시여부:''        : 초 표시됨	 * 									 NO_SEC'  : 초 표시 생략	 * @return 	바뀐 시각 String	 */	    public static String convTime(	String strTime,     												String strType,    												String strNeedSec ) {        String	strConverted	= null              		,strAM			= null              		,strPM			= null              		,strHour			= null              		,strMin			= null              		,strSec			= null ;        int iSecEndPos = 6;        if ( strType.equals( "HAN" ) ) {            strAM   = "오전";            strPM   = "오후";            strHour = "시";            strMin  = "분";            strSec  = "초";        } else if ( strType.equals( "ENG" ) ) {            strAM = "AM ";            strPM = "PM ";            strHour = strMin = ":";            strSec = "";        } else {            strAM = "";            strPM = "";            strHour = strMin = ":";            strSec = "";        }                if ( strNeedSec.equals( "NO_SEC" ) ) {            iSecEndPos = 4;            strSec = "";            if ( !strType.equals( "HAN" ) )                strMin = "";        }                if ( strTime.length() == 6 ) {        	//오전이거나 HH24 포맷이면 그냥 변환            if ( strTime.substring( 0, 2 ).compareTo( "12" ) < 0 || strAM.equals( "" ) )                if ( strAM.equals( "" ) )                    // 앞에 0이 붙도록 변환                    strConverted = strAM + strTime.substring( 0, 2 );                else                    // 앞에 0 제거                    strConverted = strAM + String.valueOf(Integer.parseInt( strTime.substring( 0, 2 ) ) );            //오후면 12를 빼서 변환                                                      else {                if ( strTime.substring( 0, 2 ).equals( "12" ) )                    strConverted = strPM +"12";                else                    strConverted = strPM + String.valueOf(Integer.parseInt( strTime.substring( 0, 2 ) ) - 12 );            }            strConverted = 	strConverted +             						strHour +            						strTime.substring( 2, 4 ) +             						strMin  +            						strTime.substring( 4, iSecEndPos ) +             						strSec;        } else            strConverted = "&nbsp";        return strConverted;    }        public static String convTime( String strTime, String strType ) {        return convTime( strTime, strType, "NO_SEC" );    }    public static String convTime( String strTime ) {        return convTime( strTime, "ETC", "NO_SEC" );    }}