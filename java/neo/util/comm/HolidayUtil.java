package neo.util.comm;import java.io.*;import java.util.*;import neo.config.Config;/** * 	@Class Name	: 	HolidayUtil.java * 	@파일설명		: 	 * 	@Version		: 	1.0 *	@Author		: 	hoon09 * 	@Copyright		: 	All Right Reserved ********************************************************************************************** * 	작업일 		버젼	구분	작업자		내용 * -------------------------------------------------------------------------------------------- *	2005-05-01 	1.4		생성	hoon09		source create (삼성전기) *	2006-11-23 	1.4		수정	hoon09		code convention apply (멀티캠퍼스) *	2009-07-03	1.6		수정	hoon09		code convention apply (국민은행, 펜타시큐리티) *	2009-09-23	1.7		수정	hoon09		code valid check (푸르덴샬생명보험,뱅뱅) **********************************************************************************************              */public class HolidayUtil {	private static String mstrDate = null;	private static String mstrSvcStartTime = null;	private static String mstrSignEndTime = null;	private static String mstrSvcEndTime = null;	private static String msDateType = null;	public HolidayUtil() {		if (mstrDate == null || 			mstrSvcStartTime == null || 			mstrSignEndTime == null || 			mstrSvcEndTime == null || 			msDateType == null) {			refresh();		} else if (!mstrDate.equals("Not Valid") && 					!mstrDate.equals(DateUtil.getToday())) {			refresh();		}	}	public static synchronized void makeNull() {		mstrDate = null;		mstrSvcStartTime = null;		mstrSignEndTime = null;		mstrSvcEndTime = null;		msDateType = null;	}	private static synchronized boolean refresh() {		BufferedReader insBr = null;		InputStream insIs = null;		try {			String today = DateUtil.getToday();			String temp = null;			insIs = new FileInputStream(Config.getInstance().getStringByServerEnv("/config/neo/holiday-file"));			insBr = new BufferedReader(new InputStreamReader(insIs));			// 한줄씩 날짜를 읽는다.			while ((temp = insBr.readLine()) != null) {				if (temp.startsWith(today)) {					StringTokenizer insToken = new StringTokenizer(temp, " ");					String[] strToken = new String[5];					int idx = 0;					for (idx = 0; insToken.hasMoreTokens(); idx++) {						strToken[idx] = insToken.nextToken();					}					mstrDate = strToken[0];					mstrSvcStartTime = strToken[1];					mstrSignEndTime = strToken[2];					mstrSvcEndTime = strToken[3];					msDateType = strToken[4];				}			}			if (mstrDate == null) {				mstrDate = "Not Valid";			}			if (mstrSvcStartTime == null) {				mstrSvcStartTime = "Not Valid";			}			if (mstrSignEndTime == null) {				mstrSignEndTime = "Not Valid";			}			if (mstrSvcEndTime == null) {				mstrSvcEndTime = "Not Valid";			}			if (msDateType == null) {				msDateType = "Not Valid";			}			return true;		} catch (Exception e) {			System.out.println("[ERROR] Can't refresh holiday File : " + e.getMessage());			return false;		}	}	public boolean isWorkDay() {		boolean rbIsWorkDay = false;		// 마지막 글자가 W = Work, H = Holiday , *라면 서비스 안함		if (!this.msDateType.equals("*")) {			rbIsWorkDay = true;		}		return rbIsWorkDay;	}	public boolean isServiceTime() {		boolean rbServiceTime = false;		String strNow = DateUtil.getNow();		String strStartTime = this.mstrSvcStartTime;		String strEndTime = this.mstrSvcEndTime;		if (strNow.compareTo(strStartTime) >= 0 && 			strNow.compareTo(strEndTime) <= 0) {			rbServiceTime = true;		}		return rbServiceTime;	}	public boolean isSignTime() {		boolean rbSignTime = false;		String strNow = DateUtil.getNow();		String strStartTime = this.mstrSvcStartTime;		String strEndTime = this.mstrSignEndTime;		if (strNow.compareTo(strStartTime) >= 0 && 			strNow.compareTo(strEndTime) <= 0) {			rbSignTime = true;		}		return rbSignTime;	}}