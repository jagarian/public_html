package neo.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import neo.config.Config;
import neo.exception.ConfigException;
import neo.util.log.Log;

/**
 * 	@Class Name	: 	NeoDao.java
 * 	@파일설명		: 	
 * 	@Version		: 	1.0
 *	@Author		: 	hoon09
 * 	@Copyright		: 	All Right Reserved
 **********************************************************************************************
 * 	작업일 		버젼	구분	작업자		내용
 * --------------------------------------------------------------------------------------------
 *	2005-05-01 	1.4		생성	hoon09		source create (삼성전기)
 *	2006-11-23 	1.4		수정	hoon09		code convention apply (멀티캠퍼스)
 *	2009-07-03	1.6		수정	hoon09		code convention apply (국민은행, 펜타시큐리티)
 *	2009-09-23	1.7		수정	hoon09		code valid check (푸르덴샬생명보험,뱅뱅)
 **********************************************************************************************             
 */
public class NeoDao {

	private Connection conn;	
	
	protected NeoDao() {		
	}

	protected NeoDao(Connection conn) {		
		setConnection(conn);
	}

	protected void setConnection(Connection conn) {
		this.conn = conn;
	}

	protected Connection getConnection() {
		return this.conn;
	}

	protected void close(PreparedStatement pstmt) {
		if (pstmt != null) {
			try {
				pstmt.close();
			} catch (SQLException se) {
				Log.info(se.getMessage(), this);
			}
		}
	}

	protected void close(Statement stmt) {
		if (stmt != null) {
			try {
				stmt.close();
			} catch (SQLException se) {
				Log.info(se.getMessage(), this);
			}
		}
	}

	protected void close(ResultSet rs) {
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException se) {
				Log.info(se.getMessage(), this);
			}
		}
	}

	protected void close(PreparedStatement pstmt, ResultSet rs) {
		close(pstmt);
		close(rs);
	}

	protected void close(Statement stmt, ResultSet rs) {
		close(rs);
		close(stmt);
	}

	protected PreparedStatement createPreparedStatement(String query)
		throws SQLException {
		return conn.prepareStatement(query);
	}
	
	protected TPreparedStatement createTPreparedStatement(String query)
		throws SQLException {
		return new TPreparedStatement(getConnection(), query);
	}
	
	protected TPreparedStatement createTPreparedStatement(Connection conn, String query)
		throws SQLException {
		return new TPreparedStatement(conn, query);
	}

	protected PreparedStatement createPreparedStatement(String sql,	int autoGeneratedKeys)
		throws SQLException {
		return conn.prepareStatement(sql, autoGeneratedKeys);
	}

	protected PreparedStatement createPreparedStatement(String sql,	int[] columnIndexes)
		throws SQLException {
		return conn.prepareStatement(sql, columnIndexes);
	}

	protected PreparedStatement createPreparedStatement(String sql,	String[] columnNames)
		throws SQLException {
		return conn.prepareStatement(sql, columnNames);
	}

	protected PreparedStatement createPreparedStatement(String sql,
														int resultSetType,
														int resultSetConcurrency)
		throws SQLException {
		return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
	}

	protected PreparedStatement createPreparedStatement(String sql,
														int resultSetType,
														int resultSetConcurrency,
														int resultSetHoldability)
		throws SQLException {
		return conn.prepareStatement(sql,
													resultSetType,
													resultSetConcurrency,
													resultSetHoldability);
	}

	protected PreparedStatement createPreparedStatement(Connection localConn, String query)
		throws SQLException {
		return localConn.prepareStatement(query);
	}

	protected PreparedStatement createPreparedStatement(Connection localConn,
														String sql,
														int autoGeneratedKeys)
		throws SQLException {
		return localConn.prepareStatement(sql, autoGeneratedKeys);
	}

	protected PreparedStatement createPreparedStatement(Connection localConn,
														String sql,
														int[] columnIndexes)
		throws SQLException {
		return localConn.prepareStatement(sql, columnIndexes);
	}

	protected PreparedStatement createPreparedStatement(Connection localConn,
														String sql,
														String[] columnNames)
		throws SQLException {
		return localConn.prepareStatement(sql, columnNames);
	}

	protected PreparedStatement createPreparedStatement(Connection localConn,
														String sql,
														int resultSetType,
														int resultSetConcurrency)
		throws SQLException {
		return localConn.prepareStatement(sql,
										resultSetType,
										resultSetConcurrency);
	}

	protected PreparedStatement createPreparedStatement(Connection localConn,
														String sql,
														int resultSetType,
														int resultSetConcurrency,
														int resultSetHoldability)
		throws SQLException {
		return localConn.prepareStatement(sql,
										resultSetType,
										resultSetConcurrency,
										resultSetHoldability);
	}

	protected Statement createStatement() throws SQLException {
		return conn.createStatement();
	}

	protected Statement createStatement(int resultSetType, int resultSetConcurrency)
		throws SQLException {
		return conn.createStatement(resultSetType, resultSetConcurrency);
	}

	protected Statement createStatement(int resultSetType,
										int resultSetConcurrency,
										int resultSetHoldability)
		throws SQLException {
		return conn.createStatement(resultSetType,
									resultSetConcurrency,
									resultSetHoldability);
	}

	protected Statement createStatement(Connection localConn)
		throws SQLException {
		return localConn.createStatement();
	}

	protected Statement createStatement(Connection localConn,
										int resultSetType,
										int resultSetConcurrency)
		throws SQLException {
		return localConn.createStatement(resultSetType, resultSetConcurrency);
	}

	protected Statement createStatement(Connection localConn,
										int resultSetType,
										int resultSetConcurrency,
										int resultSetHoldability)
		throws SQLException {
		return localConn.createStatement(resultSetType,
										resultSetConcurrency,
										resultSetHoldability);
	}
}
