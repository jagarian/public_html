/** * @Class Name	: 	JNDICache.java * @파일설명			:   이 클래스는 웹로직 JNDI 서비스에서 룩업한 객체 레퍼런스를 저장할  *								캐쉬를 구현한 것입니다 * @Version			: 	1.0 * @Author			: 	hoon09 * @Copyright		: 	All Right Reserved TwiLikeZone.com ******************************************************************** * Date			Author		Version	Description * ------------------------------------------------------------------ * 2005/05/01	박현우		0.01		Created * 2006/11/27	박현우		0.02		Source Last Updated ******************************************************************** * @history : 	2005.05.01 	init   		hoon09		init coding *					2006.11.23 	update 	hoon09		Code Conventions Apply ********************************************************************                */package neo.db.jndi;import java.util.*;import javax.naming.*;/** * 	@Class Name	: 	JNDICache.java * 	@파일설명		: 	 * 	@Version		: 	1.0 *	@Author		: 	hoon09 * 	@Copyright		: 	All Right Reserved ********************************************************************************************** * 	작업일 		버젼	구분	작업자		내용 * -------------------------------------------------------------------------------------------- *	2005-05-01 	1.4		생성	hoon09		source create (삼성전기) *	2006-11-23 	1.4		수정	hoon09		code convention apply (멀티캠퍼스) *	2009-07-03	1.6		수정	hoon09		code convention apply (국민은행, 펜타시큐리티) *	2009-09-23	1.7		수정	hoon09		code valid check (푸르덴샬생명보험,뱅뱅) **********************************************************************************************              */public class JNDICache {	private static JNDICache jndiCache;	// JNDI InitialContext 레퍼런스를 저장	private InitialContext ctx; // 룩업한 객체 레퍼런스를 저장할 해쉬테이블 레퍼런스 저장	private Hashtable jndiTbl;	public JNDICache() {		jndiTbl = new Hashtable();	}	/**	 * @title	JNDICache 객체 레퍼런스를 리턴합니다	 * 	 * @return	JNDICache	JNDI 캐쉬객체	 */	public static synchronized JNDICache getInstance() {		if (jndiCache != null)			return jndiCache;		else {			jndiCache = new JNDICache();			return jndiCache;		}	}	/**	 * @title	캐쉬에서 특정 객체를 찾아서 해당 객체 레퍼런스를 리턴합니다	 * 	 * @return	찾은 객체 레퍼런스	 */	public synchronized Object getRef(String jndiName) {		if (jndiTbl.containsKey(jndiName)) { // 해쉬테이블에 찾고자 하는 JNDI 이름이 있는 경우			return jndiTbl.get(jndiName);		} else { // 해쉬테이블에 찾고자 하는 JNDI 이름이 없는 경우			Object o = lookup(jndiName);			if (o != null) {				// jndiTbl.put(jndiName, o) ;				JNDIInfo jndiInfo = new JNDIInfo();			}			return o;		}	}	/**	 * @title	웹로직 JNDI 서비스에 접근하여 특정 JNDI 이름으로 객체를 얻습니다	 * 	 * @return	찾은 객체 레퍼런스	 */	private Object lookup(String jndiName) {		try {			if (ctx != null) {				return ctx.lookup(jndiName);			} else				return null;		} catch (NamingException ne) {			ne.printStackTrace();			return null;		}	}	/**	 * @title	웹로직 JNDI 서비스의 InitialContext를 리턴합니다	 * 	 * @return	JNDI InitialContext	 */	private InitialContext getInitialContext() throws NamingException {		if (ctx != null)			return ctx;		else			return new InitialContext();	}	/**	 * @title	캐쉬정보를 리턴합니다	 * 	 * @return	JNDI 캐쉬 정보	 */	public String toString() {		return "## JNDICache: " + jndiTbl.toString();	}}