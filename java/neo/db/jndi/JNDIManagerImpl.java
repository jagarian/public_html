package neo.db.jndi;import java.util.*;import javax.naming.*;import neo.util.log.Log;/** * 	@Class Name	: 	JNDIManagerImpl.java * 	@파일설명		: 	이 클래스는 웹로직 JNDI 서비스를 접근하는데에 필요한 메소드를 구현하고 있는 * 						관리자로써 웹로직의 졸트 세션풀을 얻고자 할때에도 JNDI 에 등록된 졸트 세션풀 * 						관리자를 얻기위해서 필요한 루틴을 정의합니다. *  *						// 로컬 웹로직 JNDI 서비스에 접근하고자 할때. *						BaseJNDIManager baseJNDIMgr = BaseJNDIManagerImpl.getInstance() ; *						// 웹로직의 졸트 세션풀에 대한 레퍼런스를 얻습니다. *						ServletSessionPoolManager poolMgr =  *						(ServletSessionPoolManager) baseJNDIMgr.lookupFromJNDI(SessionPoolManager.POOLMANAGER_NAME) ; * *						※ 사용법2) *						// 특정 URL의 웹로직 JNDI 서비스에 접근하고자 할때. *						String providerURL = "t3://x.x.x.x:7001" ; *						BaseJNDIManager baseJNDIMgr = BaseJNDIManagerImpl.getInstance(providerURL) ; * * 						※ 사용법3) *						// 특정 URL의 웹로직 JNDI 서비스에 특정 계정 및 암호로 접근하고자 할때. * 						import weblogic.jndi.* ; * 						import weblogic.rmi.MarshalException; *  * 						String providerURL = "t3://x.x.x.x:7001" ; * 						String username = "pyramide" ; * 						String password = "dsfsfsf" ; * 						BaseJNDIManager baseJNDIMgr = BaseJNDIManagerImpl.getInstance(providerURL, username, password) ; * 	@Version		: 	1.0 *	@Author		: 	hoon09 * 	@Copyright		: 	All Right Reserved ********************************************************************************************** * 	작업일 		버젼	구분	작업자		내용 * -------------------------------------------------------------------------------------------- *	2005-05-01 	1.4		생성	hoon09		source create (삼성전기) *	2006-11-23 	1.4		수정	hoon09		code convention apply (멀티캠퍼스) *	2009-07-03	1.6		수정	hoon09		code convention apply (국민은행, 펜타시큐리티) *	2009-09-23	1.7		수정	hoon09		code valid check (푸르덴샬생명보험,뱅뱅) **********************************************************************************************              */public final class JNDIManagerImpl implements JNDIManager {	private static JNDIManagerImpl JNDIMgr;	private InitialContext ictx;	private JNDIManagerImpl(String providerURL, String user, String passwd) {		init(providerURL, user, passwd);	}	public static synchronized JNDIManager getInstance() {		return getInstance(null, null, null);	}	public static synchronized JNDIManager getInstance(String providerURL) {		return getInstance(providerURL, null, null);	}	public static synchronized JNDIManager getInstance(	String providerURL,															String user,															String passwd) {		JNDIMgr = new JNDIManagerImpl(providerURL, user, passwd);		return JNDIMgr;	}	private void init(String providerURL, String user, String passwd) {		ictx = getInitialContext(providerURL, user, passwd);	}	private InitialContext getInitialContext(	String providerURL,												String user,												String passwd) {		InitialContext ictx = null;		try {			// providerURL이 널이면, 로컬 웹로직 JNDI서비스의 InitialContext를 얻어옵니다.			if (providerURL == null && user == null && passwd == null) {				ictx = new InitialContext();			} else {				Hashtable env = new Hashtable();				env.put(Context.INITIAL_CONTEXT_FACTORY,	"weblogic.jndi.WLInitialContextFactory");				if (providerURL != null) {					env.put(Context.PROVIDER_URL, providerURL);				}				if (user != null && passwd != null) {					//env.put(Context.SECURITY_CREDENTIALS, new T3User(user, passwd)) ;					env.put(Context.SECURITY_CREDENTIALS, null);				}				ictx = new InitialContext(env);			}		} catch (Exception ee) {			String errorMsg = "ERROR(JNDIManager): failed to get WebLogic JNDI InitialContext.";			Log.error(errorMsg);		}		return ictx;	}	public Object lookupFromJNDI(String bindName) {		Object obj = null;		try {			if (ictx != null) {				obj = ictx.lookup(bindName);			}		} catch (Exception ee) {			String errorMsg = "ERROR(JNDIManager): failed to lookup from JNDI Service.";		}		return obj;	}	public boolean bindToJNDI(String bindName, Object obj) {		boolean isBindOK = false;		try {			if (ictx != null) {				ictx.bind(bindName, obj);				isBindOK = true;			}		} catch (Exception ee) {			String errorMsg = "ERROR(JNDIManager): failed to bind obj to JNDI Service.";			Log.error(errorMsg);		}		return isBindOK;	}	public boolean rebindToJNDI(String bindName, Object obj) {		boolean isRebindOK = false;		try {			if (ictx != null) {				ictx.rebind(bindName, obj);				isRebindOK = true;			}		} catch (Exception ee) {			String errorMsg = "ERROR(JNDIManager): failed to rebind obj to JNDI Service.";		}		return isRebindOK;	}	public boolean unbindFromJNDI(String bindName) {		boolean isUnbindOK = false;		try {			if (ictx != null) {				ictx.unbind(bindName);				isUnbindOK = true;			}		} catch (Exception ee) {			String errorMsg = "ERROR(JNDIManager): failed to unbind from JNDI Service.";			Log.error(errorMsg);		}		return isUnbindOK;	}	public NamingEnumeration listObjFromJNDI(String bindName) {		NamingEnumeration namelist = null;		try {			if (ictx != null) {				namelist = ictx.list(bindName);			}		} catch (Exception ee) {			String errorMsg = "ERROR(JNDIManager): failed to list obj from JNDI Service.";			Log.error(errorMsg);		}		return namelist;	}	public boolean rename(String oldBindName, String newBindName) {		boolean isRenameOK = false;		try {			if (ictx != null) {				ictx.rename(oldBindName, newBindName);				isRenameOK = true;			}		} catch (Exception ee) {			String errorMsg = "ERROR(JNDIManager): failed to rename obj to New Binding Name.";			Log.error(errorMsg);		}		return isRenameOK;	}}