package neo.db;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;

/**
 * 	@Class Name	: 	TConnection.java
 * 	@파일설명		: 	
 * 	@Version		: 	1.0
 *	@Author		: 	hoon09
 * 	@Copyright		: 	All Right Reserved
 **********************************************************************************************
 * 	작업일 		버젼	구분	작업자		내용
 * --------------------------------------------------------------------------------------------
 *	2005-05-01 	1.4		생성	hoon09		source create (삼성전기)
 *	2006-11-23 	1.4		수정	hoon09		code convention apply (멀티캠퍼스)
 *	2009-07-03	1.6		수정	hoon09		code convention apply (국민은행, 펜타시큐리티)
 *	2009-09-23	1.7		수정	hoon09		code valid check (푸르덴샬생명보험,뱅뱅)
 **********************************************************************************************             
 */
class TConnection implements Connection {

	private Connection connection = null;

	public TConnection(Connection connection) throws SQLException {
		if (connection == null)
			throw new SQLException("conneciton is null.");
		this.connection = connection;
	}

	public Statement createStatement() throws SQLException {
		return new TStatement(connection.createStatement());
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return new TPreparedStatement(connection.prepareStatement(sql));
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return connection.prepareCall(sql);
	}

	public String nativeSQL(String sql) throws SQLException {
		return connection.nativeSQL(sql);
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		connection.setAutoCommit(autoCommit);
	}

	public boolean getAutoCommit() throws SQLException {
		return connection.getAutoCommit();
	}

	public void commit() throws SQLException {
		connection.commit();
	}

	public void rollback() throws SQLException {
		connection.rollback();
	}

	public void close() throws SQLException {
		connection.close();
	}

	public boolean isClosed() throws SQLException {
		return connection.isClosed();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return connection.getMetaData();
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		connection.setReadOnly(readOnly);
	}

	public boolean isReadOnly() throws SQLException {
		return connection.isReadOnly();
	}

	public void setCatalog(String catalog) throws SQLException {
		connection.setCatalog(catalog);
	}

	public String getCatalog() throws SQLException {
		return connection.getCatalog();
	}

	public void setTransactionIsolation(int level) throws SQLException {
		connection.setTransactionIsolation(level);
	}

	public int getTransactionIsolation() throws SQLException {
		return connection.getTransactionIsolation();
	}

	public SQLWarning getWarnings() throws SQLException {
		return connection.getWarnings();
	}

	public void clearWarnings() throws SQLException {
		connection.clearWarnings();
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency)
		throws SQLException {
		Statement stmt = connection.createStatement(resultSetType, resultSetConcurrency);
		return new TStatement(stmt);
	}

	public Statement createStatement(int resultSetType,
									int resultSetConcurrency,
									int resultSetHoldability)
		throws SQLException {
		Statement stmt = connection.createStatement(resultSetType,
													resultSetConcurrency,
													resultSetHoldability);
		return new TStatement(stmt);
	}

	public PreparedStatement prepareStatement(String sql,	int autoGeneratedKeys)
		throws SQLException {
		PreparedStatement stmt = connection.prepareStatement(sql, autoGeneratedKeys);
		return new TPreparedStatement(stmt);
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
		throws SQLException {
		PreparedStatement stmt = connection.prepareStatement(sql, columnIndexes);
		return new TPreparedStatement(stmt);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames)
		throws SQLException {
		PreparedStatement stmt = connection.prepareStatement(sql, columnNames);
		return new TPreparedStatement(stmt);
	}

	public PreparedStatement prepareStatement(String sql,
												int resultSetType,
												int resultSetConcurrency)
		throws SQLException {
		PreparedStatement stmt = connection.prepareStatement(sql,
															resultSetType,
															resultSetConcurrency);
		return new TPreparedStatement(stmt);
	}

	public PreparedStatement prepareStatement(String sql,
											int resultSetType,
											int resultSetConcurrency,
											int resultSetHoldability)
		throws SQLException {
		PreparedStatement stmt = connection.prepareStatement(sql,
															resultSetType,
															resultSetConcurrency,
															resultSetHoldability);
		return new TPreparedStatement(stmt);
	}

	public CallableStatement prepareCall(
		String sql,
		int resultSetType,
		int resultSetConcurrency)
		throws SQLException {
		return connection.prepareCall(sql, resultSetType, resultSetConcurrency);
	}

	public CallableStatement prepareCall(String sql,
										int resultSetType,
										int resultSetConcurrency,
										int resultSetHoldability)
		throws SQLException {
		return connection.prepareCall(sql,
										resultSetType,
										resultSetConcurrency,
										resultSetHoldability);
	}

	public Map getTypeMap() throws SQLException {
		return connection.getTypeMap();
	}

	public void setTypeMap(Map map) throws SQLException {
		connection.setTypeMap(map);
	}

	public int getHoldability() throws SQLException {
		return connection.getHoldability();
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		connection.releaseSavepoint(savepoint);
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		connection.rollback(savepoint);
	}

	public void setHoldability(int holdability) throws SQLException {
		connection.setHoldability(holdability);
	}

	public Savepoint setSavepoint() throws SQLException {
		return connection.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return connection.setSavepoint(name);
	}	
}