package neo.db;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import neo.util.log.Log;

/**
 * 	@Class Name	: 	TStatement.java
 * 	@파일설명		: 	
 * 	@Version		: 	1.0
 *	@Author		: 	hoon09
 * 	@Copyright		: 	All Right Reserved
 **********************************************************************************************
 * 	작업일 		버젼	구분	작업자		내용
 * --------------------------------------------------------------------------------------------
 *	2005-05-01 	1.4		생성	hoon09		source create (삼성전기)
 *	2006-11-23 	1.4		수정	hoon09		code convention apply (멀티캠퍼스)
 *	2009-07-03	1.6		수정	hoon09		code convention apply (국민은행, 펜타시큐리티)
 *	2009-09-23	1.7		수정	hoon09		code valid check (푸르덴샬생명보험,뱅뱅)
 **********************************************************************************************             
 */
public class TStatement implements Statement {

	private Statement statement;

	public TStatement(Statement statement) {
		this.statement = statement;
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		try {
			return statement.executeQuery(sql);
		} catch (SQLException se) {
			Log.info(se.toString(), this);
			throw se;
		} finally {
		}
	}

	public int executeUpdate(String sql) throws SQLException {
		int result = 0;
		try {
			result = statement.executeUpdate(sql);
		} catch (SQLException se) {
			Log.info(se.toString(), this);
			throw se;
		} finally {
		}
		return result;
	}

	public void close() throws SQLException {
		try {
			statement.close();
		} catch (SQLException e) {
			throw e;
		}
	}

	public int getMaxFieldSize() throws SQLException {
		return statement.getMaxFieldSize();
	}

	public void setMaxFieldSize(int max) throws SQLException {
		statement.setMaxFieldSize(max);
	}

	public int getMaxRows() throws SQLException {
		return statement.getMaxRows();
	}

	public void setMaxRows(int max) throws SQLException {
		statement.setMaxRows(max);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		statement.setEscapeProcessing(enable);
	}

	public int getQueryTimeout() throws SQLException {
		return statement.getQueryTimeout();
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		statement.setQueryTimeout(seconds);
	}

	public void cancel() throws SQLException {
		statement.cancel();
	}

	public SQLWarning getWarnings() throws SQLException {
		return statement.getWarnings();
	}

	public void clearWarnings() throws SQLException {
		statement.clearWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		statement.setCursorName(name);
	}

	public boolean execute(String sql) throws SQLException {
		try {
			return statement.execute(sql);
		} catch (SQLException se) {
			Log.info(se.toString(), this);
			throw se;
		} finally {
		}
	}

	public ResultSet getResultSet() throws SQLException {
		return statement.getResultSet();
	}

	public int getUpdateCount() throws SQLException {
		return statement.getUpdateCount();
	}

	public boolean getMoreResults() throws SQLException {
		return statement.getMoreResults();
	}

	public void setFetchDirection(int direction) throws SQLException {
		statement.setFetchDirection(direction);
	}

	public int getFetchDirection() throws SQLException {
		return statement.getFetchDirection();
	}

	public void setFetchSize(int rows) throws SQLException {
		statement.setFetchSize(rows);
	}

	public int getFetchSize() throws SQLException {
		return statement.getFetchSize();
	}

	public int getResultSetConcurrency() throws SQLException {
		return statement.getResultSetConcurrency();
	}

	public int getResultSetType() throws SQLException {
		return statement.getResultSetType();
	}

	public void addBatch(String sql) throws SQLException {
		statement.addBatch(sql);
	}

	public void clearBatch() throws SQLException {
		statement.clearBatch();
	}

	public int[] executeBatch() throws SQLException {
		try {
			return statement.executeBatch();
		} catch (SQLException se) {
			throw se;
		} finally {
		}
	}

	public Connection getConnection() throws SQLException {
		return new TConnection(this.statement.getConnection());
	}

	public boolean execute(String sql, int autoGeneratedKeys)
		throws SQLException {
		try {
			return statement.execute(sql, autoGeneratedKeys);
		} catch (SQLException se) {
			throw se;
		} finally {
		}
	}

	public boolean execute(String sql, int[] columnIndexes)
		throws SQLException {
		try {
			return statement.execute(sql, columnIndexes);
		} catch (SQLException se) {
			throw se;
		} finally {
		}
	}

	public boolean execute(String sql, String[] columnNames)
		throws SQLException {
		try {
			return statement.execute(sql, columnNames);
		} catch (SQLException se) {
			throw se;
		} finally {
		}
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
		throws SQLException {
		int result = 0;
		try {
			result = statement.executeUpdate(sql, autoGeneratedKeys);
		} catch (SQLException se) {
			throw se;
		} finally {
		}
		return result;
	}

	public int executeUpdate(String sql, int[] columnIndexes)
		throws SQLException {
		int result = 0;
		try {
			result = statement.executeUpdate(sql, columnIndexes);
		} catch (SQLException se) {
			throw se;
		} finally {
		}
		return result;
	}

	public int executeUpdate(String sql, String[] columnNames)
		throws SQLException {
		int result = 0;
		try {
			result = statement.executeUpdate(sql, columnNames);
		} catch (SQLException se) {
			throw se;
		} finally {
		}
		return result;
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return statement.getGeneratedKeys();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return statement.getMoreResults(current);
	}

	public int getResultSetHoldability() throws SQLException {
		return statement.getResultSetHoldability();
	}

	
}